@page "/eightpuzzle"

<h1>8 Puzzle</h1>

<hr />

<div class="row">

    <div class="col-md-12">
        <label>Dimensão</label>

        <div class="form-check">
            <input class="form-check-input" type="radio" name="3por3" id="3por3" checked @onclick="AlterarPara3por3">
            <label class="form-check-label" for="3por3">
                3x3
            </label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="radio" name="4por4" id="4por4" @onclick="AlterarPara4por4">
            <label class="form-check-label" for="4por4">
                4x4
            </label>
        </div>
    </div>

    <div class="col-md-6">

        <div class="card">

            <div class="card-header">Estado inicial</div>
            <div class="card-body">
                <Tabuleiro Dimensao="Dimensao" />
            </div>
        </div>

    </div>

    <div class="col-md-6">

        <div class="card">

            <div class="card-header">Estado final</div>
            <div class="card-body">
                <Tabuleiro Dimensao="Dimensao" />
            </div>
        </div>

    </div>

    <div class="col-md-12">
        <button type="button" @onclick="Resolver" class="btn btn-danger">Resolver</button>
    </div>

</div>

@code {

    public int Dimensao { get; set; } = 3;

    private void AlterarPara3por3() => Dimensao = 3;

    private void AlterarPara4por4() => Dimensao = 4;


    public void Resolver()
    {
        int[,] estadoInicial = new int[,]
        {
            { 1, 2, 3},
            { 4, 5, 0},
            { 7, 8, 6},
        };

        int[,] estadoObjetivo = new int[,]
        {
            { 1, 2, 3},
            { 4, 5, 6},
            { 7, 8, 0},
        };

        new _8Puzzle.Models.Solver(estadoInicial, estadoObjetivo).Solve();

        //TODO: Verificar se os estado são possíveis
        //TODO: Verificar a distância hamming
        //TODO: Mostrar o caminho feito 
    }

}
